/*
 * Copyright 2020-2030, MateCloud, DAOTIANDI Technology Inc All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Author: pangu(7333791@qq.com)
 */
package ${packageName}.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;

import com.mate.core.auth.annotation.PreAuth;
import com.mate.core.common.api.Result;
import com.mate.core.database.entity.Search;
import com.mate.core.log.annotation.Log;
import com.mate.core.web.controller.BaseController;
import com.mate.core.web.util.CollectionUtil;

import org.springframework.web.bind.annotation.RestController;
import ${packageName}.service.I${ClassName}Service;
import ${packageName}.entity.${BusinessName};
import javax.validation.Valid;

/**
 * <p>
 * $!{functionName} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */

@RestController
@AllArgsConstructor
@RequestMapping("$!{businessName}")
@Tag(name  = "$!{functionName}", tags = "$!{functionName}接口")
public class ${ClassName}Controller extends BaseController {

    private final I$!{BusinessName}Service $!{businessName}Service;

    /**
     * 分页列表
     *
     * @param search 　搜索关键词
     * @return Result
     */
    @PreAuth
    @Log(value = "$!{functionName}列表")
    @GetMapping("/page")
    @Operation(summary = "$!{functionName}列表")
    @Parameters({
        @Parameter(name = "current", required = true,  description = "当前页", in = ParameterIn.DEFAULT),
        @Parameter(name = "size", required = true,  description = "每页显示数据", in = ParameterIn.DEFAULT),
        @Parameter(name = "keyword", required = true,  description = "模糊查询关键词", in = ParameterIn.DEFAULT),
        @Parameter(name = "startDate", required = true,  description = "创建开始日期", in = ParameterIn.DEFAULT),
        @Parameter(name = "endDate", required = true,  description = "创建结束日期", in = ParameterIn.DEFAULT),
    })
    public Result<?> page(Search search) {
		return Result.data($!{businessName}Service.listPage(search));
    }

    /**
     * $!{functionName}信息
     *
     * @param id Id
     * @return Result
     */
    @PreAuth
    @Log(value = "$!{functionName}信息")
    @GetMapping("/get")
    @Operation(summary = "$!{functionName}信息")
    @Parameters({
            @Parameter(name = "id", required = true,  description = "ID", in = ParameterIn.DEFAULT),
    })
    public Result<?> get(@RequestParam String id) {
		return Result.data($!{businessName}Service.getById(id));
	}

    /**
    * $!{functionName}设置
    *
    * @param $!{table.entityPath} $!{entity} 对象
    * @return Result
    */
    @PreAuth
    @Log(value = "$!{functionName}设置")
    @PostMapping("/set")
    @Operation(summary = "$!{functionName}设置"")
    public Result<?> set(@Valid @RequestBody $!{BusinessName} $!{businessName}) {
		return Result.condition($!{businessName}Service.saveOrUpdate($!{businessName}));
	}

    /**
    * $!{functionName}删除
    *
    * @param ids id字符串，根据,号分隔
    * @return Result
    */
    @PreAuth
    @Log(value = "$!{functionName}删除")
    @PostMapping("/del")
    @Operation(summary = "$!{functionName}删除")
    @Parameters({
            @Parameter(name = "ids", required = true,  description = "多个用,号隔开", in = ParameterIn.DEFAULT)
    })
    public Result<?> del(@RequestParam String ids) {
		return Result.condition($!{businessName}Service.removeByIds(CollectionUtil.stringToCollection(ids)));
	}
}


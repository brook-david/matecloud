/*
 * Copyright 2020-2030, MateCloud, DAOTIANDI Technology Inc All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Author: pangu(7333791@qq.com)
 */
package ${package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;

import com.mate.core.auth.annotation.PreAuth;
import com.mate.core.common.api.Result;
import com.mate.core.database.entity.Search;
import com.mate.core.log.annotation.Log;
import com.mate.core.web.util.CollectionUtil;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};
import javax.validation.Valid;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@AllArgsConstructor
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Tag(name  = "$!{table.comment}", tags = "$!{table.comment}接口")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final $!{table.serviceName} $!{table.entityPath}Service;

    /**
     * 分页列表
     *
     * @param search 　搜索关键词
     * @return Result
     */
    @PreAuth
    @Log(value = "$!{table.comment}列表", exception = "$!{table.comment}列表请求异常")
    @GetMapping("/page")
    @Operation(summary = "$!{table.comment}列表", description = "分页查询")
    @Parameters({
        @Parameter(name = "current", required = true,  description = "当前页", in = ParameterIn.DEFAULT),
        @Parameter(name = "size", required = true,  description = "每页显示数据", in = ParameterIn.DEFAULT),
        @Parameter(name = "keyword", required = true,  description = "模糊查询关键词", in = ParameterIn.DEFAULT),
        @Parameter(name = "startDate", required = true,  description = "创建开始日期", in = ParameterIn.DEFAULT),
        @Parameter(name = "endDate", required = true,  description = "创建结束日期", in = ParameterIn.DEFAULT),
    })
    public Result<?> page(Search search) {
		return Result.data($!{table.entityPath}Service.listPage(search));
    }

    /**
     * $!{table.comment}信息
     *
     * @param id Id
     * @return Result
     */
    @PreAuth
    @Log(value = "$!{table.comment}信息", exception = "$!{table.comment}信息请求异常")
    @GetMapping("/get")
    @Operation(summary = "$!{table.comment}信息", description = "根据ID查询")
    @Parameters({
            @Parameter(name = "id", required = true,  description = "ID", in = ParameterIn.DEFAULT),
    })
    public Result<?> get(@RequestParam String id) {
		return Result.data($!{table.entityPath}Service.getById(id));
	}

    /**
    * $!{table.comment}设置
    *
    * @param $!{table.entityPath} $!{entity} 对象
    * @return Result
    */
    @PreAuth
    @Log(value = "$!{table.comment}设置", exception = "$!{table.comment}设置请求异常")
    @PostMapping("/set")
    @Operation(summary = "$!{table.comment}设置", description = "$!{table.comment}设置,支持新增或修改")
    public Result<?> set(@Valid @RequestBody $!{entity} $!{table.entityPath}) {
		return Result.condition($!{table.entityPath}Service.saveOrUpdate($!{table.entityPath}));
	}

    /**
    * $!{table.comment}删除
    *
    * @param ids id字符串，根据,号分隔
    * @return Result
    */
    @PreAuth
    @Log(value = "$!{table.comment}删除", exception = "$!{table.comment}删除请求异常")
    @PostMapping("/del")
    @Operation(summary = "$!{table.comment}删除", description = "$!{table.comment}删除")
    @Parameters({
            @Parameter(name = "ids", required = true,  description = "多个用,号隔开", in = ParameterIn.DEFAULT)
    })
    public Result<?> del(@RequestParam String ids) {
		return Result.condition($!{table.entityPath}Service.removeByIds(CollectionUtil.stringToCollection(ids)));
	}
}

#end